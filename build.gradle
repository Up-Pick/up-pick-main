// 루트 프로젝트는 하위 프로젝트들을 관리하는 역할만 합니다.
// 'apply false'를 통해 플러그인을 루트에는 적용하지 않고, 하위 모듈에서 필요에 따라 적용하도록 합니다.
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6' apply false
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '4.0.5'
    id 'com.google.protobuf' version '0.9.5' apply false
}

// 모든 하위 프로젝트에 적용될 공통 설정 (그룹, 버전, 저장소)
allprojects {
    group = 'org.oneog'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

// 전역으로 사용할 변수 설정
ext {
    querydslVersion = '5.1.0'
    jjwtVersion = '0.13.0'
    springCloudAwsVersion = '3.4.0'
    snippetsDir = file("$buildDir/generated-snippets")
    grpcSpringBootStarterVersion = '3.1.0.RELEASE'
    grpcVersion = '1.76.0'
    protobufVersion = '4.33.0'
}

configurations {
    asciidoctorExtensions
}

dependencies {
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.5.6"
    }
}

// 모든 하위 프로젝트에 적용될 공통 플러그인, 자바 설정, 의존성 관리
subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.google.protobuf'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    // QueryDSL: generated sources 디렉터리 추가 및 컴파일 타임 annotation processor 설정
    sourceSets {
        main {
            java {
                // QueryDSL이 생성하는 Q-타입을 포함시킵니다.
                srcDir("$buildDir/generated/querydsl")
                srcDirs("$buildDir/generated/source/proto/main/grpc")
                srcDirs("$buildDir/generated/source/proto/main/java")
            }
        }
    }

    // Java 컴파일 시 annotation processor가 생성한 소스를 인식하도록 설정
    tasks.withType(JavaCompile).configureEach {
        // annotationProcessor configuration을 processor path로 사용
        options.annotationProcessorPath = configurations.annotationProcessor
        // QueryDSL이 생성하는 소스 위치
        options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/querydsl")
    }

    // Spring Boot BOM을 전역으로 import 해서 하위 모듈들의 버전 관리를 맡깁니다.
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:3.5.6"
            mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
        }
    }

    // Protobuf 플러그인 설정
    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protobufVersion}"
        }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }
}

// 각 서비스의 RestDocs 스니펫을 루트로 복사
task copySnippets {
    // 각 서브프로젝트의 generateRestDocsIndex가 완료된 후 실행
    dependsOn {
        subprojects.findAll { 
            it.tasks.findByName('generateRestDocsIndex') != null 
        }.collect { 
            it.tasks.named('generateRestDocsIndex') 
        }
    }
    
    // test가 실행되지 않으면 건너뜀
    onlyIf {
        subprojects.any { subproject ->
            new File(subproject.buildDir, 'generated-snippets').exists()
        }
    }
    
    doLast {
        def targetDir = file("$buildDir/generated-snippets")
        targetDir.mkdirs()
        
        subprojects.each { subproject ->
            def snippetsDir = new File(subproject.buildDir, 'generated-snippets')
            if (snippetsDir.exists() && snippetsDir.list()?.length > 0) {
                println "Copying snippets from ${subproject.name}"
                copy {
                    from snippetsDir
                    into "$targetDir/${subproject.name}"
                    include '**/*'
                }
            }
        }
    }
}

// 통합 index.adoc 생성
task generateUnifiedIndex {
    dependsOn copySnippets
    
    def outputFile = file("$buildDir/docs/asciidoc/index.adoc")
    outputs.file(outputFile)
    
    // copySnippets가 실행되었을 때만 실행
    onlyIf {
        file("$buildDir/generated-snippets").exists()
    }
    
    doLast {
        def content = new StringBuilder()
        content.append("= Up-Pick 통합 API 문서\n")
        content.append(":toc: left\n")
        content.append(":toclevels: 3\n")
        content.append(":sectnums:\n")
        content.append(":sectanchors:\n")
        content.append(":source-highlighter: highlightjs\n")
        content.append(":highlightjs-theme: github\n")
        content.append(":icons: font\n")
        content.append(":sectlinks:\n\n")
        
        def hasContent = false
        
        // snippets가 실제로 있는 서비스만 포함
        subprojects.each { subproject ->
            def snippetsDir = new File(buildDir, "generated-snippets/${subproject.name}")
            
            if (snippetsDir.exists() && snippetsDir.list()?.length > 0) {
                hasContent = true
                def serviceName = subproject.name.replace('uppick-', '').replace('-service', '')
                content.append("== ${serviceName.capitalize()} Service\n\n")
                
                // auto-index를 직접 include (상대 경로)
                def autoIndexFile = new File(snippetsDir, 'auto-index.adoc')
                if (autoIndexFile.exists()) {
                    // auto-index.adoc의 내용을 읽어서 snippet 경로를 조정하여 직접 포함
                    def autoIndexContent = autoIndexFile.text
                    // {snippets}를 실제 상대 경로로 변경
                    def relativeSnippetsPath = "../../generated-snippets/${subproject.name}"
                    def adjustedContent = autoIndexContent.replaceAll(/\{snippets\}/, relativeSnippetsPath)
                    content.append(adjustedContent)
                    content.append("\n\n")
                }
            }
        }
        
        if (!hasContent) {
            content.append("== 문서 없음\n\n")
            content.append("생성된 API 문서가 없습니다.\n")
        }
        
        outputFile.parentFile.mkdirs()
        outputFile.text = content.toString()
        println "Generated unified index at: ${outputFile.absolutePath}"
    }
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    sourceDir file("$buildDir/docs/asciidoc")
    
    dependsOn generateUnifiedIndex
    
    // 통합 문서가 생성되었을 때만 실행
    onlyIf {
        file("$buildDir/docs/asciidoc/index.adoc").exists()
    }
    
    attributes "snippets": file("$buildDir/generated-snippets")
    baseDirFollowsSourceDir()
}

apply from: "$rootDir/gradle/scripts/restdocs-index.gradle"

// test 실행 시 통합 문서 자동 생성
tasks.register('unifiedDocs') {
    group = 'documentation'
    description = '모든 서비스의 RestDocs를 통합하여 생성합니다'
    
    dependsOn copySnippets, generateUnifiedIndex, asciidoctor
    
    // snippets가 있을 때만 실행
    onlyIf {
        subprojects.any { subproject ->
            new File(subproject.buildDir, 'generated-snippets').exists()
        }
    }
    
    // 실행 순서 보장
    copySnippets.mustRunAfter subprojects.collect { it.tasks.withType(Test) }
    generateUnifiedIndex.mustRunAfter copySnippets
    asciidoctor.mustRunAfter generateUnifiedIndex
}

// 각 서브프로젝트의 test 완료 후 통합 문서 생성
subprojects {
    tasks.withType(Test).configureEach {
        finalizedBy rootProject.tasks.named('unifiedDocs')
    }
}

tasks.named("build") {
    dependsOn asciidoctor
}