version: '3.8'

services:
  main-mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: uppick_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - main_mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  auction-mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: uppick_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3308:3306"
    volumes:
      - auction_mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # 추후 Lock과 Cache용 Redis를 분리해야함
  auction-redis:
    image: redis:8.2.2
    ports:
      - "6380:6379"
    volumes:
      - auction_redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  uppick-api-gateway:
    build:
      context: .
      dockerfile: uppick-api-gateway/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: local
      AUCTION_SERVICE_URL: http://uppick-auction-service:8080
      MAIN_SERVICE_URL: http://uppick-main-service:8080
    ports:
      - "8080:8080"

  uppick-auction-service:
    build:
      context: .
      dockerfile: uppick-auction-service/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: local
      DB_URL: jdbc:mysql://auction-mysql:3306/uppick_db
      DB_USER: user
      DB_PASS: password
      REDIS_HOST: auction-redis
      REDIS_PORT: 6379
      GATEWAY_URL: http://uppick-api-gateway:8080
    ports:
      - "8082:8080"
    depends_on:
      auction-mysql:
        condition: service_healthy
      auction-redis:
        condition: service_healthy

  uppick-main-service:
    build:
      context: .
      dockerfile: uppick-main-service/Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: local
      DB_URL: jdbc:mysql://main-mysql:3306/uppick_db
      DB_USER: user
      DB_PASS: password
    ports:
      - "8081:8080"
      - "9090:9090"
    depends_on:
      main-mysql:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      # Prometheus 설정 파일만 마운트 (데이터는 저장하지 않음)
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      # 메트릭 데이터 보관 기간 (기본 15일 -> 1일로 단축)
      - '--storage.tsdb.retention.time=1d'
      - '--web.enable-remote-write-receiver'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  main_mysql_data:
  auction_mysql_data:
  auction_redis_data:
  # Grafana 설정 및 대시보드만 유지 (Prometheus 데이터는 컨테이너 재시작시 초기화)
  grafana_data:
