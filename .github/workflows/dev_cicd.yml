# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에서 이 이름으로 표시됩니다.
name: Dev CI/CD

# 워크플로우의 동시 실행(concurrency) 설정입니다.
concurrency:
  group: uppick-dev-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# 워크플로우가 언제 실행될지를 정의하는 "트리거" 설정입니다.
on:
  push:
    branches: [ "dev" ] # 'dev' 브랜치에 코드가 푸시(push)될 때마다 실행됩니다.

# GitHub Pages 배포를 위한 권한 설정
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # 이 작업을 실행할 가상 머신의 종류를 지정합니다. 최신 Ubuntu 버전을 사용합니다.
    runs-on: ubuntu-latest
    
    # 이 작업 내에서 실행될 단계(Step)들의 목록입니다.
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout Source Code
        uses: actions/checkout@v3

      # 2. JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 테스트 및 REST Docs 생성
      - name: Build and Generate REST Docs
        run: ./gradlew build

      # 5. GitHub Pages 배포를 위한 아티팩트 업로드
      - name: Upload REST Docs to GitHub Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: build/docs/asciidoc

      # 6. GitHub Pages에 배포
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # 7. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV_AWS_REGION }}

      # 8. Amazon ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 9. Docker 이미지 빌드 및 ECR에 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.DEV_ECR_REPOSITORY_URI }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.DEV_ECR_REPOSITORY_URI }}:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ secrets.DEV_ECR_REPOSITORY_URI }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.DEV_ECR_REPOSITORY_URI }}:latest
          docker push $ECR_REGISTRY/${{ secrets.DEV_ECR_REPOSITORY_URI }}:latest

      # 10. EC2 인스턴스에 배포
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.DEV_EC2_SSH_KEY }}
          script: |
            set -e
            aws ecr get-login-password --region ${{ secrets.DEV_AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            if [ $(docker ps -a -q -f name=my-app-container) ]; then
              docker stop my-app-container || true
              docker rm my-app-container || true
            fi
            
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DEV_ECR_REPOSITORY_URI }}:latest
            
            docker run -d --name my-app-container -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=dev \
              -e DB_URL=${{ secrets.DEV_DB_URL }} \
              -e DB_USER=${{ secrets.DEV_DB_USER }} \
              -e DB_PASS=${{ secrets.DEV_DB_PASS }} \
              -e JWT_KEY=${{ secrets.DEV_JWT_KEY }} \
              -e AWS_REGION=${{ secrets.DEV_AWS_REGION }} \
              -e S3_BUCKET_NAME=${{ secrets.DEV_S3_BUCKET_NAME }} \
              ${{ steps.login-ecr.outputs.registry }}/${{ secrets.DEV_ECR_REPOSITORY_URI }}:latest